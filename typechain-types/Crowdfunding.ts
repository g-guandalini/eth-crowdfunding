/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Crowdfunding {
  export type ProjectStruct = {
    owner: AddressLike;
    title: string;
    description: string;
    goal: BigNumberish;
    deadline: BigNumberish;
    amountRaised: BigNumberish;
    completed: boolean;
    fixedDonationAmount: boolean;
    requiredDonationAmount: BigNumberish;
    withdrawn: boolean;
  };

  export type ProjectStructOutput = [
    owner: string,
    title: string,
    description: string,
    goal: bigint,
    deadline: bigint,
    amountRaised: bigint,
    completed: boolean,
    fixedDonationAmount: boolean,
    requiredDonationAmount: bigint,
    withdrawn: boolean
  ] & {
    owner: string;
    title: string;
    description: string;
    goal: bigint;
    deadline: bigint;
    amountRaised: bigint;
    completed: boolean;
    fixedDonationAmount: boolean;
    requiredDonationAmount: bigint;
    withdrawn: boolean;
  };
}

export interface CrowdfundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRefund"
      | "createProject"
      | "donate"
      | "donations"
      | "feeWallet"
      | "getAllProjects"
      | "getDonation"
      | "getProject"
      | "getProjectDonorsWithAmounts"
      | "getProjectsCount"
      | "projectDonors"
      | "projects"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DonationReceived"
      | "FeePaid"
      | "FundsWithdrawn"
      | "ProjectCreated"
      | "RefundClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "feeWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllProjects",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectDonorsWithAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectDonors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProjectDonorsWithAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectDonors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, donor: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeePaidEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish,
    feeRecipient: AddressLike
  ];
  export type OutputTuple = [
    projectId: bigint,
    donor: string,
    amount: bigint,
    feeRecipient: string
  ];
  export interface OutputObject {
    projectId: bigint;
    donor: string;
    amount: bigint;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, owner: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    owner: AddressLike,
    title: string,
    goal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    owner: string,
    title: string,
    goal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    owner: string;
    title: string;
    goal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundClaimedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    donor: AddressLike,
    amountRefunded: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    donor: string,
    amountRefunded: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    donor: string;
    amountRefunded: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Crowdfunding extends BaseContract {
  connect(runner?: ContractRunner | null): Crowdfunding;
  waitForDeployment(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRefund: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProject: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _goal: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _fixedDonationAmount: boolean,
      _requiredDonationAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  donate: TypedContractMethod<[_projectId: BigNumberish], [void], "payable">;

  donations: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  feeWallet: TypedContractMethod<[], [string], "view">;

  getAllProjects: TypedContractMethod<
    [],
    [Crowdfunding.ProjectStructOutput[]],
    "view"
  >;

  getDonation: TypedContractMethod<
    [_projectId: BigNumberish, _donor: AddressLike],
    [bigint],
    "view"
  >;

  getProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [Crowdfunding.ProjectStructOutput],
    "view"
  >;

  getProjectDonorsWithAmounts: TypedContractMethod<
    [_projectId: BigNumberish],
    [[string[], bigint[]] & { addresses_: string[]; amounts_: bigint[] }],
    "view"
  >;

  getProjectsCount: TypedContractMethod<[], [bigint], "view">;

  projectDonors: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        boolean
      ] & {
        owner: string;
        title: string;
        description: string;
        goal: bigint;
        deadline: bigint;
        amountRaised: bigint;
        completed: boolean;
        fixedDonationAmount: boolean;
        requiredDonationAmount: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  withdrawFunds: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _goal: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _fixedDonationAmount: boolean,
      _requiredDonationAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllProjects"
  ): TypedContractMethod<[], [Crowdfunding.ProjectStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDonation"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _donor: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [Crowdfunding.ProjectStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectDonorsWithAmounts"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [[string[], bigint[]] & { addresses_: string[]; amounts_: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projectDonors"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        boolean
      ] & {
        owner: string;
        title: string;
        description: string;
        goal: bigint;
        deadline: bigint;
        amountRaised: bigint;
        completed: boolean;
        fixedDonationAmount: boolean;
        requiredDonationAmount: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FeePaid"
  ): TypedContractEvent<
    FeePaidEvent.InputTuple,
    FeePaidEvent.OutputTuple,
    FeePaidEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RefundClaimed"
  ): TypedContractEvent<
    RefundClaimedEvent.InputTuple,
    RefundClaimedEvent.OutputTuple,
    RefundClaimedEvent.OutputObject
  >;

  filters: {
    "DonationReceived(uint256,address,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "FeePaid(uint256,address,uint256,address)": TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;
    FeePaid: TypedContractEvent<
      FeePaidEvent.InputTuple,
      FeePaidEvent.OutputTuple,
      FeePaidEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "RefundClaimed(uint256,address,uint256)": TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;
    RefundClaimed: TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;
  };
}
